/*
 * RBTree.c
 *
 *  Created on: Nov 22, 2012
 *      Author: arming
 */

#include "RBTree.h"
#include <malloc.h>
void left_rotate(RBTreeNode **root, RBTreeNode *x)
{
	RBTreeNode *y;
	y = x->right;
	x->right = y->left;
	if (y->left)
		y->left->parent = x;

	y->parent = x->parent;
	if (!x->parent)
		*root = y;
	else if (x == x->parent->left)
		x->parent->left = y;
	else
		x->parent->right = y;

	y->left = x;
	x->parent = y;
}

void right_rotate(RBTreeNode **root, RBTreeNode *x)
{
	RBTreeNode *y;
	y = x->left;
	x->left = y->right;
	if (y->right)
		y->right->parent = x;

	y->parent = x->parent;
	if (!x->parent)
		root = y;
	else if (x == x->parent->right)
		x->parent->right = y;
	else
		x->parent->left = y;

	y->right = x;
	x->parent = y;

}

void rb_insert(RBTreeNode **root, RBTreeNode *z)
{
	RBTreeNode *y = NULL;
	RBTreeNode *x = *root;
	while (x)
	{
		y = x;
		if (z->key < x->key)
			x = x->left;
		else
			x = x->right;
	}

	z->parent = y;
	if (!y)
	{
		*root = z;
	}
	else if (z->key < y->key)
		y->left = z;
	else
		y->right = z;

	z->left = NULL;
	z->right = NULL;
	z->color = 'R';
	rb_insert_fixup(root,z);
}
void rb_insert_fixup(RBTreeNode **root, RBTreeNode *z)
{
	RBTreeNode *y = NULL;
	while((z->parent)->color == 'R')
	{
		if(z->parent == z->parent->parent->left)
		{
			y = z->parent->parent->right;
			if(y->color == 'R')
			{
				z->parent->color = 'B';
				y->color = 'B';
				z->parent->parent->color = 'R';
			}
			else if(z == z->parent->right)
			{

			}
		}
	}
}

RBTreeNode * rb_delete(RBTreeNode *root, RBTreeNode *z)
{
//	return ;
}

RBTreeNode *rb_delete_fixup(RBTreeNode *root, RBTreeNode *z)
{

}
