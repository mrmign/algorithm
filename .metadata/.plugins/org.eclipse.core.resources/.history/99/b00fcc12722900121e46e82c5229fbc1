#include "DSMgr.h"

/*
OpenFile function is called anytime a file needs to be opened for 
reading or writing.  The prototype for this function is OpenFile(String filename) 
and returns an error code.  The function opens the file specified by the filename.
*/

static FILE *file;
int OpenFile(char* filename)
{
	file = fopen("data.dbf", "r+");
}

/*
CloseFile function is called when the data file needs to be closed.  The protoype 
is CloseFile() and returns an error code.  This function closes the file that is in
current use.  This function should only be called as the database is changed or a
the program closes.
*/
int CloseFile()
{
	fclose(file);
}

/*
ReadPage function is called by the FixPage function in the buffer manager.  This prototype
is ReadPage(page_id, bytes) and returns what it has read in.  This function calls fseek() 
and  fread() to gain data from a file.
*/
bFrame ReadPage(int page_id, int frame_id)
{
	FILE *f = GetFile();
	Seek(page_id);
	fread(&(buf[frame_id])->field, sizeof(char), FRAMESIZE, f);

	return buf[frame_id];
}

/*
WritePage function is called whenever a page is taken out of the buffer. 
The prototype is WritePage(frame_id, frm) and returns how many bytes were written. 
This function calls fseek() and fwrite() to save data into a file.
*/
int WritePage(int frame_id, bFrame frm)
{
	FILE *f = GetFile();
	int page_id = ftop[frame_id];
	Seek(page_id);
	return fwrite(frm.field, sizeof(char), FRAMESIZE, f);
}

/*
Seek function moves the file pointer.
*/
int Seek(int offset)
{
	FILE *f = GetFile();
	return fseek(f, offset * FRAMESIZE, SEEK_SET);
}

/*
GetFile function returns the current file.
*/
FILE * GetFile()
{
	// file = fopen("data.dbf", "r+");
	if (!file)
	{
		OpenFile(NULL);
	}
	return file;
	
}

/*
IncNumPages function increments the page counter.
*/
void IncNumPages()
{
	
}

/*
GetNumPages function returns the page counter.
*/
int GetNumPages()
{
	
}

/*
SetUse function looks sets the bit in the pages array. 
This array keeps track of the pages that are being used. 
If all records in a page are deleted, then that page is 
not really used anymore and can be reused again in the database. 
In order to know if a page is reusable, the array is checked for
any use_bits that are set to zero.  The fixNewPage function firsts
checks this array for a use_bit of zero.  If one is found, the page
is reused.  If not, a new page is allocated.
*/
void SetUse(int page_id, int use_bit)
{

}

/*
GetUse function returns the current use_bit for the corresponding page_id.
*/
int GetUse(int page_id)
{

}
